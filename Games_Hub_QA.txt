Questions & Answers
-----------------------

1. What is responsible for defining the routes of the games resource?
-------------------

A new MongoClient instance is created to allow us to connect to our database.

Within the connection, we connect to the games_hub database and create a collection called gamesCollection from our games array (which can be found in /db/seeds.js). We then create our gamesRouter using this collection to help us define paths.

Using app.use, we can then define the root path of our newly created router.


2. What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?
-------------------

The client side handles everything at the front-end. This includes CSS styling, forms, HTML rendering, displaying data to users and more.

The server side is responsible for connecting to our database and defining our initial data and arrays. We also define our paths here.

The client and server files are stored in different directories.

3. What are the the responsibilities of server.js?
-------------------

Server.js is responsible for many tasks. This includes:

* Making a connection to the Express framework
* Creating a connection to our database
* Defining our CORS policy
* Creating a database and collection based on our data (e.g. database seed data)

4. What are the responsibilities of the gamesRouter?
-------------------

gamesRouter takes advantage of our create_router.js file to define the paths for GET, POST, DELETE & PUT requests.

5. What process does the the client (front-end) use to communicate with the server?
-------------------

The client-side connects to the server-side via the GamesService function in services/GamesService.js. We can fetch all results, post new data to our games array and delete a game using its ID.

This file also defines the base URL as http://localhost:5000/api/games/, which is the same port and URL path defined in server.js on the server-side.

6. What optional second argument does the fetch method take? And what is it used for in this application? Hint: See Using Fetch on the MDN docs
-------------------

The second argument allows us to apply custom settings to the resource (URL) we defined in the first argument.

In this situation, we are actually passing through the data posted through our game submission form. This, in turn, adds the data our new games to the database. Therefore, the games list at /api/games is updated too.


7. Which of the games API routes does the front-end application consume (i.e. make requests to)?
-------------------

Three API routes are utilised.

* A GET request is used for the default path at /api/games in order to display all games (i.e. the base URL)

* A POST request is made to the default path at /api/games in order to add a new game to the database

* A DELETE request is made to delete a game using the default Path + ID

8. What are we using the MongoDB Driver for?
-------------------

The MongoDB driver allows us to connect our Node.JS application to our MongoDB database.


Extension
------------

Why do we need to use ObjectId from the MongoDB driver?
--------------------------

The ObjectID is an automatically generated identifier which is used as the primary key for a collection.